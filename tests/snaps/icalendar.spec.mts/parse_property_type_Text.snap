Here is a new Class:

<?php

/**
 * This is iCalParse
 *
 * @category Parser
 * @author   Timo Henke <phpstuff@thenke.de>
 * @license  http://www.opensource.org/licenses/mit-license.php  MIT License
 */

	class iCalParse
	{
		const VERSION = "1.0";

		public function doParse( $data )
		{
			$lines = preg_split('/\r?\n/',$data,-1, PREG_SPLIT_NO_EMPTY);
    		if( preg_match('/^BEGIN:VCALENDAR/i',$lines[0]) && preg_match('/^END:VCALENDAR/i',$lines[sizeof($lines)-1]) )
    		{
				$res = array();
				$addTo = array();
				$addToElement = '';
				foreach ($lines as $line)
				{
					if( preg_match('/^(BEGIN|END):(VTODO|VEVENT|VCALENDAR|DAYLIGHT|VTIMEZONE|STANDARD)/s',$line,$m) )
					{
						switch( $m[1] )
						{
							case 'BEGIN' :
								$addTo[] = trim( (sizeof($addTo) > 0 ? $addTo[sizeof($addTo)-1] : '') . '/' . $m[2],'/');
								break;
							case 'END' :
								array_pop($addTo);
								break;
						}
						if( sizeof($addTo) > 0 )
						{
							$addToElement = $addTo[sizeof($addTo)-1];
						}
					}
					else
					{
						if( substr($line,0,1) != ' ' )
						{
			                list($lastkey,$value) = $this->splitKeyValue($line);
							$this->arrayPathSet($res,$addToElement.'/'.$lastkey,$value);

						}
						else
						{
							$this->arrayPathSet($res,$addToElement.'/'.$lastkey,$this->arrayPathGet($res,$addToElement.'/'.$lastkey) . substr($line,1));
						}
					}
				}
   			}
   			return $res;
		}

		function arrayPathSet(&$a, $path, $value)
		{
			$p = explode('/',$path);
			$key = array_shift($p);
			if (empty($p))
			{
				$a[$key] = $value;
			}
			else
			{
				if (!isset($a[$key]) || !is_array($a[$key]))
				{
					$a[$key] = array();
				}
				$this->arrayPathSet($a[$key], implode('/',$p), $value);
			}
		}

		function arrayPathGet($data, $path)
		{
			$found = true;
			$path = explode("/", trim($path,'/'));
			$r = count($path);
			for( $x = 0; ($x < $r && $found); $x++ )
			{
				$key = $path[$x];
				if (isset($data[$key]))
				{
					$data = $data[$key];
				}
				else
				{
					$found = false;
				}
			}
			return $found ? $data : false;
		}

		public function splitKeyValue( $row )
		{
			preg_match("/([^:]+)[:]([\w\W]*)/", $row, $matches);
			return (sizeof($matches) == 0) ? false : array_splice($matches, 1, 2);
		}

	}
